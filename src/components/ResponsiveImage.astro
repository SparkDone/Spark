---
/**
 * 响应式图片组件
 * 支持多种格式和尺寸，优化加载性能
 */

export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  sizes?: string;
  quality?: number;
}

const {
  src,
  alt,
  width = 800,
  height = 600,
  class: className = '',
  loading = 'lazy',
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw',
  quality = 80
} = Astro.props;

// 生成不同尺寸的图片URL
function generateSrcSet(originalSrc: string, baseWidth: number): string {
  const sizes = [320, 640, 768, 1024, 1280, 1920];
  const validSizes = sizes.filter(size => size <= baseWidth * 2); // 不超过原图2倍
  
  if (originalSrc.startsWith('http')) {
    // 外部图片，尝试生成不同尺寸
    return validSizes.map(size => {
      if (originalSrc.includes('api.sparkdone.com')) {
        // Strapi图片，可能有不同尺寸版本
        const filename = originalSrc.split('/').pop();
        if (filename) {
          const baseUrl = originalSrc.replace(filename, '');
          return `${baseUrl}${filename} ${size}w`;
        }
      }
      return `${originalSrc} ${size}w`;
    }).join(', ');
  } else {
    // 本地图片，生成不同尺寸
    const ext = originalSrc.split('.').pop();
    const basePath = originalSrc.replace(`.${ext}`, '');
    return validSizes.map(size => `${basePath}-${size}w.${ext} ${size}w`).join(', ');
  }
}

// 检查是否为Strapi图片
const isStrapiImage = src.includes('api.sparkdone.com') || src.includes('/uploads/');

// 生成WebP和AVIF版本的URL
function generateModernFormats(originalSrc: string) {
  if (originalSrc.startsWith('http') && isStrapiImage) {
    // Strapi图片，保持原格式
    return {
      avif: originalSrc,
      webp: originalSrc,
      fallback: originalSrc
    };
  } else {
    // 本地图片，生成现代格式
    const ext = originalSrc.split('.').pop();
    const basePath = originalSrc.replace(`.${ext}`, '');
    return {
      avif: `${basePath}.avif`,
      webp: `${basePath}.webp`,
      fallback: originalSrc
    };
  }
}

const formats = generateModernFormats(src);
const srcSet = generateSrcSet(src, width);
---

<picture class={`responsive-image ${className}`}>
  <!-- AVIF格式 (最新，最小文件) -->
  {formats.avif !== formats.fallback && (
    <source
      srcset={formats.avif}
      type="image/avif"
      sizes={sizes}
    />
  )}
  
  <!-- WebP格式 (广泛支持，较小文件) -->
  {formats.webp !== formats.fallback && (
    <source
      srcset={formats.webp}
      type="image/webp"
      sizes={sizes}
    />
  )}
  
  <!-- 原始格式 (兼容性后备) -->
  <img
    src={src}
    srcset={srcSet}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    sizes={sizes}
    class={`w-full h-auto object-cover transition-opacity duration-300 ${className}`}
    decoding="async"
    onload="this.style.opacity='1'"
    style="opacity: 0;"
  />
</picture>

<style>
  .responsive-image {
    display: block;
    overflow: hidden;
  }
  
  .responsive-image img {
    transition: opacity 0.3s ease-in-out;
  }
  
  /* 图片加载占位效果 */
  .responsive-image::before {
    content: '';
    display: block;
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }
  
  .dark .responsive-image::before {
    background: linear-gradient(90deg, #2a2a2a 25%, #1a1a1a 50%, #2a2a2a 75%);
    background-size: 200% 100%;
  }
  
  @keyframes loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }
  
  /* 图片加载完成后隐藏占位 */
  .responsive-image img[style*="opacity: 1"]::before {
    display: none;
  }
</style>

<script>
  // 图片懒加载增强
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target as HTMLImageElement;
          
          // 预加载现代格式
          if (img.loading === 'lazy') {
            const picture = img.closest('picture');
            if (picture) {
              const sources = picture.querySelectorAll('source');
              sources.forEach(source => {
                if (source.srcset) {
                  const link = document.createElement('link');
                  link.rel = 'preload';
                  link.as = 'image';
                  link.href = source.srcset.split(' ')[0]; // 取第一个URL
                  link.type = source.type || '';
                  document.head.appendChild(link);
                }
              });
            }
          }
          
          imageObserver.unobserve(img);
        }
      });
    }, {
      rootMargin: '50px 0px', // 提前50px开始加载
      threshold: 0.1
    });
    
    // 观察所有懒加载图片
    document.querySelectorAll('img[loading="lazy"]').forEach(img => {
      imageObserver.observe(img);
    });
  }
</script>
