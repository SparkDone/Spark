---
// 混合模式：首页静态预渲染
export const prerender = true;

import UniversalPostList from "../components/UniversalPostList.astro";
import LayoutSwitcher from "../components/LayoutSwitcher.astro";
import BannerCarousel from "../components/ui/BannerCarousel.astro";
import { getHomeBannersFromStrapi } from "../lib/banner-adapter";



import { PAGE_SIZE } from "../constants/constants";
import MainGridLayout from "../layouts/MainGridLayout.astro";
import { getIndexPageData, resetRequestCache } from "../utils/unified-data-fetcher";
import { contentManager } from "../lib/content-manager";
import { getLayoutConfig, getSiteConfig } from "../lib/config-integration";
import { preloadPopularCategories } from "../utils/category-preloader";
import { preheatAllCategories } from "../utils/fast-category-loader";
// import { getHomeBanners } from "../data/banners"; // 不再需要，使用动态组件

// 🚀 优化：只获取首页需要的数据
resetRequestCache();

// 并行获取数据以提高性能
const [indexPageData, firstPagePosts, bannerImages, layoutConfig] = await Promise.all([
  getIndexPageData(),
  // 只获取首页需要的文章数量，减少数据传输
  contentManager.getPaginatedPosts(1, PAGE_SIZE),
  // 获取首页Banner数据
  getHomeBannersFromStrapi(),
  // 获取整合后的布局配置
  getLayoutConfig()
]);

// 异步预热所有分类（不阻塞页面渲染）
Promise.all([
  preloadPopularCategories().catch(error => {
    console.warn('⚠️ 预加载热门分类失败:', error);
  }),
  preheatAllCategories().catch(error => {
    console.warn('⚠️ 预热所有分类失败:', error);
  })
]);

const { indexSettings } = indexPageData;
const { posts: data, total: totalPosts } = firstPagePosts;

// 计算分页数据
const totalPages = Math.ceil(totalPosts / PAGE_SIZE);
const currentPage = 1;
const defaultLayout = layoutConfig.defaultHomepageLayout;

// Banner显示逻辑
const showBanner = bannerImages && bannerImages.length > 0;

if (import.meta.env.DEV) {
  console.log('🎨 首页调试信息:', {
    indexSettings,
    defaultLayout,
    hasIndexSettings: !!indexSettings,
    settingsLayout: indexSettings?.default_homepage_layout
  });
}

// 首页不设置特定标题，让 Layout 使用默认的 "网站名称 - 网站副标题" 格式
const title = undefined;

// 获取整合后的站点配置用于结构化数据
const siteConfigData = await getSiteConfig();
const strapiSiteTitle = siteConfigData.title;
const strapiSiteDescription = siteConfigData.description || siteConfigData.subtitle;

// 首页结构化数据
const jsonLd = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  name: strapiSiteTitle,
  description: strapiSiteDescription,
  url: Astro.site?.href || "https://sparkdone.com",
  potentialAction: {
    "@type": "SearchAction",
    target: {
      "@type": "EntryPoint",
      urlTemplate: `${Astro.site?.href || "https://sparkdone.com"}search?q={search_term_string}`
    },
    "query-input": "required name=search_term_string"
  },
  publisher: {
    "@type": "Organization",
    name: strapiSiteTitle,
    url: Astro.site?.href || "https://sparkdone.com"
  }
};
---

<MainGridLayout title={title}>
    <!-- 首页结构化数据 -->
    <script is:inline slot="head" type="application/ld+json" set:html={JSON.stringify(jsonLd)}></script>

    <!-- 为 SwupA11yPlugin 添加主标题 -->
    <h1 class="sr-only">首页</h1>



    <!-- Banner轮播 - 条件渲染 -->
    {showBanner && (
        <div class="mb-8 onload-animation">
            <BannerCarousel
                images={bannerImages}
                autoPlay={true}
                interval={5000}
                showDots={false}
                showArrows={true}
                height="400px"
                className="w-full"
            />
        </div>
    )}

    <!-- 布局切换控件 -->
    <div class="flex justify-end items-center mb-6 onload-animation">
        <LayoutSwitcher defaultLayout={defaultLayout} targetSelector=".universal-post-list" />
    </div>

    <!-- 统一文章列表 - 只渲染一次 -->
    <UniversalPostList
        posts={data}
        defaultLayout={defaultLayout}
        class="onload-animation"
    />
</MainGridLayout>

<!-- 优化：关键脚本优先加载 -->
<script>
    // 使用更稳定的模块加载方式，避免构建时的路径问题
    async function loadCriticalModules() {
        try {
            // 使用相对路径导入，让Astro处理路径解析
            const modulePromises = [];

            // 动态导入模块管理器
            try {
                const moduleManagerModule = await import('../scripts/module-manager.js');
                if (moduleManagerModule) {
                    modulePromises.push(Promise.resolve(moduleManagerModule));
                }
            } catch (e) {
                console.warn('⚠️ 模块管理器加载失败，跳过');
            }

            // 动态导入懒加载工具
            try {
                const lazyLoaderModule = await import('../utils/lazy-loader.ts');
                if (lazyLoaderModule && lazyLoaderModule.setupImageLazyLoading) {
                    lazyLoaderModule.setupImageLazyLoading();
                    if (import.meta.env.DEV) {
                        console.log('✅ 图片懒加载已初始化');
                    }
                }
            } catch (e) {
                console.warn('⚠️ 懒加载工具加载失败，使用备用方案');
                // 备用方案：基本的图片懒加载
                setupBasicImageLazyLoading();
            }

            if (import.meta.env.DEV) {
                console.log('🚀 关键功能加载完成');
            }
        } catch (error) {
            console.error('❌ 关键功能加载失败:', error);
            // 确保基本功能可用
            setupBasicImageLazyLoading();
        }
    }

    // 备用的基本图片懒加载
    function setupBasicImageLazyLoading() {
        if (typeof window !== 'undefined' && 'IntersectionObserver' in window) {
            const images = document.querySelectorAll('img[loading="lazy"]');
            if (images.length > 0) {
                const imageObserver = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            const img = entry.target;
                            if (img.dataset.src) {
                                img.src = img.dataset.src;
                                img.removeAttribute('data-src');
                            }
                            imageObserver.unobserve(img);
                        }
                    });
                });

                images.forEach(img => imageObserver.observe(img));

                if (import.meta.env.DEV) {
                    console.log('🔄 使用备用图片懒加载方案');
                }
            }
        }
    }

    // 页面加载完成后执行
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', loadCriticalModules);
    } else {
        loadCriticalModules();
    }
</script>


