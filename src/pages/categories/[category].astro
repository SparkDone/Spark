---
import Pagination from "../../components/control/Pagination.astro";
import UniversalPostList from "../../components/UniversalPostList.astro";
import LayoutSwitcher from "../../components/LayoutSwitcher.astro";
import BannerCarousel from "../../components/ui/BannerCarousel.astro";
import { PAGE_SIZE } from "../../constants/constants";
import MainGridLayout from "../../layouts/MainGridLayout.astro";
import { getCategoryPageData, resetRequestCache } from "../../utils/unified-data-fetcher";
import { getCachedCategoryData } from "../../utils/category-preloader";
import { getFastCategoryPageData } from "../../utils/fast-category-loader";
import { getCategoryBanners, defaultBanner } from "../../data/banners";
import { getCategorySlug, getCategoryFromSlug } from "../../config/category-slugs";

// 强制启用预渲染 - 生成静态HTML文件
export const prerender = true;

console.log('🏗️ 分类页面：强制静态预渲染模式');

// 静态路径生成函数 - 生成所有分类的静态页面（包括没有文章的分类）
export async function getStaticPaths() {

  try {
    console.log('🏗️ 生产模式：开始生成分类页面静态路径...');

    // 使用 getCategoryList 获取所有分类（包括没有文章的分类）
    const { getCategoryList } = await import("../../utils/hybrid-content-utils");
    const allCategories = await getCategoryList();

    console.log(`🏗️ 找到 ${allCategories.length} 个分类（包括没有文章的分类）:`, allCategories.map(c => `${c.name}(${c.count}篇)`));

    // 为每个分类生成静态路径，使用简化的slug
    const paths = allCategories.map(categoryData => {
      const slug = getCategorySlug(categoryData.name);
      console.log(`🔗 分类路径映射: "${categoryData.name}" -> "${slug}" (${categoryData.count}篇文章)`);

      return {
        params: {
          category: slug // 使用简化的slug
        }
      };
    });

    console.log(`🏗️ 将生成 ${paths.length} 个静态分类页面（包括 ${allCategories.filter(c => c.count === 0).length} 个空分类）`);
    return paths;
  } catch (error) {
    console.error('❌ 生成分类静态路径失败:', error);
    return [];
  }
}

// 获取分类参数并转换为分类名
const { category } = Astro.params;

// 为了正确解析slug，我们需要获取所有分类列表
let allCategories: string[] = [];
try {
  const { contentManager } = await import("../../lib/content-manager");
  const allPosts = await contentManager.getSortedPosts();
  allCategories = [...new Set(allPosts
    .map(post => post.data.category)
    .filter(Boolean)
  )];
} catch (error) {
  console.error('获取分类列表失败:', error);
}

const categoryName = category ? getCategoryFromSlug(category, allCategories) : '';

// 调试信息（仅开发环境且非构建模式）
if (import.meta.env.DEV && !import.meta.env.PROD) {
  console.log('🔍 分类参数处理:', {
    slug参数: category,
    分类名: categoryName,
    所有分类: allCategories
  });
}

// 生产模式下移除调试日志
if (import.meta.env.DEV && !import.meta.env.PROD) {
  console.log('🚀🚀🚀 CATEGORY.ASTRO 分类页面开始执行 🚀🚀🚀');
  console.log('🚀🚀🚀 当前时间:', new Date().toISOString());
  console.log('🚀🚀🚀 Astro.url:', Astro.url.pathname);
  console.log('🚀🚀🚀 分类参数:', category);
}

if (!category || !categoryName) {
  console.log('❌ 分类参数为空或无效');
  return Astro.redirect('/404/');
}

// 使用分类名获取数据
let categoryPageData;
let loadMethod = 'slug-mapped';

// 调试信息（仅开发环境且非构建模式）
if (import.meta.env.DEV && !import.meta.env.PROD) {
  console.log(`🔍 开始获取分类数据: ${categoryName} (slug: ${category})`);
}

const startTime = Date.now();
resetRequestCache();

try {
  categoryPageData = await getCategoryPageData(categoryName);
} catch (error) {
  console.error('❌ 获取分类数据失败:', error);
  // 如果获取数据失败，创建一个空的分类页面数据
  categoryPageData = {
    posts: [],
    categoryData: {
      name: categoryName,
      count: 0,
      url: `/categories/${category}/`
    },
    layoutType: 'list',
    categoryName: categoryName
  };
}

const loadTime = Date.now() - startTime;

if (import.meta.env.NODE_ENV !== 'production') {
  console.log(`✅ 分类数据获取完成: ${category} (${categoryPageData.posts.length}篇, ${loadTime}ms, 方法: ${loadMethod})`);
}

const {
  posts: categoryPosts,
  categoryData,
  layoutType,
  categoryName: originalCategoryName
} = categoryPageData;

// 使用我们解析的分类名，而不是数据获取器返回的
const categoryDisplayName = categoryName;

// 异步获取分类Banner数据和开关状态
const categoryBanners = await getCategoryBanners(categoryName);
const showBanner = categoryBanners.length > 0;
const bannerImages = showBanner ? categoryBanners : [];

// 调试信息
if (import.meta.env.DEV) {
  console.log('🎨 分类Banner调试:', {
    category,
    categoryBannersCount: categoryBanners.length,
    showBanner,
    bannerImagesCount: bannerImages.length
  });
}

// 输出分类布局类型用于调试
if (import.meta.env.DEV && !import.meta.env.PROD) {
  console.log('🔍 分类页面调试信息:', {
    category,
    categoryData,
    layoutType,
    categoryDisplayName,
    hasData: !!categoryData,
    dataSource: categoryData ? 'Strapi' : 'Local'
  });
}

// 计算分页数据
const totalPages = Math.ceil(categoryPosts.length / PAGE_SIZE);
const currentPage = 1;
const start = 0;
const end = PAGE_SIZE;
const data = categoryPosts.slice(start, end);

const page = {
  data,
  start,
  end: Math.min(end, categoryPosts.length),
  size: PAGE_SIZE,
  total: categoryPosts.length,
  currentPage,
  lastPage: totalPages,
  url: {
    current: `/categories/${category}/`,
    prev: undefined,
    next: totalPages > 1 ? `/categories/${category}/2/` : undefined,
  }
};

const len = page.data.length;
// 调试信息（仅开发环境且非构建模式）
if (import.meta.env.DEV && !import.meta.env.PROD) {
  console.log('🔍 category.astro 页面数据:', {
    dataLength: len,
    currentPage,
    totalPages,
    total: page.total,
    category
  });
}

// 设置页面标题 - SEO 优化格式
const title = categoryDisplayName;

// 分类页面结构化数据
const jsonLd = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  name: `${categoryDisplayName} - 文章分类`,
  description: `查看所有关于 ${categoryDisplayName} 的文章`,
  url: Astro.url.href,
  mainEntity: {
    "@type": "ItemList",
    numberOfItems: categoryPosts.length,
    itemListElement: data.map((post, index) => ({
      "@type": "ListItem",
      position: index + 1,
      item: {
        "@type": "BlogPosting",
        headline: post.data.title,
        description: post.data.description || "",
        url: `${Astro.site?.href || "https://sparkdone.com"}posts/${post.slug}/`,
        datePublished: post.data.published.toISOString(),
        author: {
          "@type": "Person",
          name: typeof post.data.author === 'string' ? post.data.author : post.data.author?.name || "Admin"
        }
      }
    }))
  }
};
// decodedCategory 已在上面定义，这里不需要重复声明
---

<MainGridLayout title={title}>
  <!-- 分类页面结构化数据 -->
  <script is:inline slot="head" type="application/ld+json" set:html={JSON.stringify(jsonLd)}></script>

  <!-- 防止布局跳动：在页面加载前设置正确的布局 -->
  <script is:inline slot="head">
    // 立即设置布局，防止闪动
    document.addEventListener('DOMContentLoaded', function() {
      const container = document.querySelector('.universal-post-list');
      const switcher = document.querySelector('.layout-switcher');

      if (container && switcher) {
        const expectedLayout = switcher.getAttribute('data-default-layout') || 'grid';
        const currentLayout = container.getAttribute('data-layout');

        // 调试信息（仅开发环境且非构建模式）
        if (window.location.hostname === 'localhost' && !window.location.href.includes('dist')) {
          console.log('🔍 分类页面布局检查:', {
            expectedLayout,
            currentLayout,
            switcherElement: !!switcher,
            containerElement: !!container
          });
        }

        // 确保布局一致
        if (currentLayout !== expectedLayout) {
          container.setAttribute('data-layout', expectedLayout);
          if (window.location.hostname === 'localhost') {
            console.log(`🔄 修正布局: ${currentLayout} -> ${expectedLayout}`);
          }
        }

        // 确保容器可见
        container.style.opacity = '1';
      }
    });
  </script>

  <!-- 为 SwupA11yPlugin 添加主标题 -->
  <h1 class="sr-only">分类: {categoryDisplayName}</h1>
  
  {page.data.length > 0 ? (
    <>
      <!-- Banner轮播 - 条件渲染 -->
      {showBanner && (
        <div class="mb-8 onload-animation">
          <BannerCarousel
            images={bannerImages}
            autoPlay={true}
            interval={6000}
            showDots={false}
            showArrows={true}
            height="350px"
            className="w-full"
          />
        </div>
      )}

      <!-- 布局切换控件 -->
      <div class="flex justify-end items-center mb-6 onload-animation">
        <LayoutSwitcher defaultLayout={layoutType} targetSelector=".universal-post-list" />
      </div>

      <!-- 统一文章列表 - 只渲染一次 -->
      <UniversalPostList
        posts={page.data}
        defaultLayout={layoutType}
        class="onload-animation"
      />

      <!-- 分页 -->
      {totalPages > 1 && (
        <Pagination
          class="mx-auto onload-animation mt-8"
          page={page}
          style={`animation-delay: calc(var(--content-delay) + ${page.data.length * 50}ms)`}
        />
      )}
    </>
  ) : (
    <div class="text-center py-12">
      <h2 class="text-xl font-semibold mb-6 text-gray-900 dark:text-gray-100">该分类下暂无内容</h2>
      <a href="/" class="btn btn-primary">
        返回首页
      </a>
    </div>
  )}
</MainGridLayout>
